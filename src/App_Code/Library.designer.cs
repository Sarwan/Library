#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Library")]
public partial class LibraryDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAbstraction(Abstraction instance);
  partial void UpdateAbstraction(Abstraction instance);
  partial void DeleteAbstraction(Abstraction instance);
  partial void InsertWebPage(WebPage instance);
  partial void UpdateWebPage(WebPage instance);
  partial void DeleteWebPage(WebPage instance);
  partial void InsertAuthor(Author instance);
  partial void UpdateAuthor(Author instance);
  partial void DeleteAuthor(Author instance);
  partial void InsertClassification(Classification instance);
  partial void UpdateClassification(Classification instance);
  partial void DeleteClassification(Classification instance);
  partial void InsertEza(Eza instance);
  partial void UpdateEza(Eza instance);
  partial void DeleteEza(Eza instance);
  partial void InsertFavorite(Favorite instance);
  partial void UpdateFavorite(Favorite instance);
  partial void DeleteFavorite(Favorite instance);
  partial void InsertFileType(FileType instance);
  partial void UpdateFileType(FileType instance);
  partial void DeleteFileType(FileType instance);
  partial void InsertKeyWord(KeyWord instance);
  partial void UpdateKeyWord(KeyWord instance);
  partial void DeleteKeyWord(KeyWord instance);
  partial void InsertLanguage(Language instance);
  partial void UpdateLanguage(Language instance);
  partial void DeleteLanguage(Language instance);
  partial void InsertLog(Log instance);
  partial void UpdateLog(Log instance);
  partial void DeleteLog(Log instance);
  partial void InsertReplay(Replay instance);
  partial void UpdateReplay(Replay instance);
  partial void DeleteReplay(Replay instance);
  partial void InsertTitle(Title instance);
  partial void UpdateTitle(Title instance);
  partial void DeleteTitle(Title instance);
  partial void InsertUserRole(UserRole instance);
  partial void UpdateUserRole(UserRole instance);
  partial void DeleteUserRole(UserRole instance);
  partial void InsertArticle(Article instance);
  partial void UpdateArticle(Article instance);
  partial void DeleteArticle(Article instance);
  partial void InsertFile(File instance);
  partial void UpdateFile(File instance);
  partial void DeleteFile(File instance);
  #endregion
	
	public LibraryDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["LibraryConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public LibraryDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public LibraryDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public LibraryDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public LibraryDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Abstraction> Abstractions
	{
		get
		{
			return this.GetTable<Abstraction>();
		}
	}
	
	public System.Data.Linq.Table<WebPage> WebPages
	{
		get
		{
			return this.GetTable<WebPage>();
		}
	}
	
	public System.Data.Linq.Table<Author> Authors
	{
		get
		{
			return this.GetTable<Author>();
		}
	}
	
	public System.Data.Linq.Table<Classification> Classifications
	{
		get
		{
			return this.GetTable<Classification>();
		}
	}
	
	public System.Data.Linq.Table<Eza> Ezas
	{
		get
		{
			return this.GetTable<Eza>();
		}
	}
	
	public System.Data.Linq.Table<Favorite> Favorites
	{
		get
		{
			return this.GetTable<Favorite>();
		}
	}
	
	public System.Data.Linq.Table<FileType> FileTypes
	{
		get
		{
			return this.GetTable<FileType>();
		}
	}
	
	public System.Data.Linq.Table<KeyWord> KeyWords
	{
		get
		{
			return this.GetTable<KeyWord>();
		}
	}
	
	public System.Data.Linq.Table<Language> Languages
	{
		get
		{
			return this.GetTable<Language>();
		}
	}
	
	public System.Data.Linq.Table<Log> Logs
	{
		get
		{
			return this.GetTable<Log>();
		}
	}
	
	public System.Data.Linq.Table<Replay> Replays
	{
		get
		{
			return this.GetTable<Replay>();
		}
	}
	
	public System.Data.Linq.Table<Title> Titles
	{
		get
		{
			return this.GetTable<Title>();
		}
	}
	
	public System.Data.Linq.Table<UserRole> UserRoles
	{
		get
		{
			return this.GetTable<UserRole>();
		}
	}
	
	public System.Data.Linq.Table<Article> Articles
	{
		get
		{
			return this.GetTable<Article>();
		}
	}
	
	public System.Data.Linq.Table<File> Files
	{
		get
		{
			return this.GetTable<File>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Abstraction")]
public partial class Abstraction : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ArticleID;
	
	private System.Nullable<int> _Language;
	
	private string _Abstract;
	
	private EntityRef<Article> _Article;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArticleIDChanging(int value);
    partial void OnArticleIDChanged();
    partial void OnLanguageChanging(System.Nullable<int> value);
    partial void OnLanguageChanged();
    partial void OnAbstractChanging(string value);
    partial void OnAbstractChanged();
    #endregion
	
	public Abstraction()
	{
		this._Article = default(EntityRef<Article>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleID", DbType="Int NOT NULL")]
	public int ArticleID
	{
		get
		{
			return this._ArticleID;
		}
		set
		{
			if ((this._ArticleID != value))
			{
				if (this._Article.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnArticleIDChanging(value);
				this.SendPropertyChanging();
				this._ArticleID = value;
				this.SendPropertyChanged("ArticleID");
				this.OnArticleIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="Int")]
	public System.Nullable<int> Language
	{
		get
		{
			return this._Language;
		}
		set
		{
			if ((this._Language != value))
			{
				this.OnLanguageChanging(value);
				this.SendPropertyChanging();
				this._Language = value;
				this.SendPropertyChanged("Language");
				this.OnLanguageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abstract", DbType="NVarChar(MAX)")]
	public string Abstract
	{
		get
		{
			return this._Abstract;
		}
		set
		{
			if ((this._Abstract != value))
			{
				this.OnAbstractChanging(value);
				this.SendPropertyChanging();
				this._Abstract = value;
				this.SendPropertyChanged("Abstract");
				this.OnAbstractChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Abstraction", Storage="_Article", ThisKey="ArticleID", OtherKey="ID", IsForeignKey=true)]
	public Article Article
	{
		get
		{
			return this._Article.Entity;
		}
		set
		{
			Article previousValue = this._Article.Entity;
			if (((previousValue != value) 
						|| (this._Article.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Article.Entity = null;
					previousValue.Abstractions.Remove(this);
				}
				this._Article.Entity = value;
				if ((value != null))
				{
					value.Abstractions.Add(this);
					this._ArticleID = value.ID;
				}
				else
				{
					this._ArticleID = default(int);
				}
				this.SendPropertyChanged("Article");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WebPage")]
public partial class WebPage : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _PageTitle;
	
	private string _PageFile;
	
	private EntitySet<UserRole> _UserRoles;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPageTitleChanging(string value);
    partial void OnPageTitleChanged();
    partial void OnPageFileChanging(string value);
    partial void OnPageFileChanged();
    #endregion
	
	public WebPage()
	{
		this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageTitle", DbType="NChar(255)")]
	public string PageTitle
	{
		get
		{
			return this._PageTitle;
		}
		set
		{
			if ((this._PageTitle != value))
			{
				this.OnPageTitleChanging(value);
				this.SendPropertyChanging();
				this._PageTitle = value;
				this.SendPropertyChanged("PageTitle");
				this.OnPageTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageFile", DbType="NChar(64)")]
	public string PageFile
	{
		get
		{
			return this._PageFile;
		}
		set
		{
			if ((this._PageFile != value))
			{
				this.OnPageFileChanging(value);
				this.SendPropertyChanging();
				this._PageFile = value;
				this.SendPropertyChanged("PageFile");
				this.OnPageFileChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebPage_UserRole", Storage="_UserRoles", ThisKey="ID", OtherKey="PageID")]
	public EntitySet<UserRole> UserRoles
	{
		get
		{
			return this._UserRoles;
		}
		set
		{
			this._UserRoles.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_UserRoles(UserRole entity)
	{
		this.SendPropertyChanging();
		entity.WebPage = this;
	}
	
	private void detach_UserRoles(UserRole entity)
	{
		this.SendPropertyChanging();
		entity.WebPage = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Author")]
public partial class Author : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<int> _ArticleID;
	
	private string _AuthorName;
	
	private EntityRef<Article> _Article;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArticleIDChanging(System.Nullable<int> value);
    partial void OnArticleIDChanged();
    partial void OnAuthorNameChanging(string value);
    partial void OnAuthorNameChanged();
    #endregion
	
	public Author()
	{
		this._Article = default(EntityRef<Article>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleID", DbType="Int")]
	public System.Nullable<int> ArticleID
	{
		get
		{
			return this._ArticleID;
		}
		set
		{
			if ((this._ArticleID != value))
			{
				if (this._Article.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnArticleIDChanging(value);
				this.SendPropertyChanging();
				this._ArticleID = value;
				this.SendPropertyChanged("ArticleID");
				this.OnArticleIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorName", DbType="NChar(128)")]
	public string AuthorName
	{
		get
		{
			return this._AuthorName;
		}
		set
		{
			if ((this._AuthorName != value))
			{
				this.OnAuthorNameChanging(value);
				this.SendPropertyChanging();
				this._AuthorName = value;
				this.SendPropertyChanged("AuthorName");
				this.OnAuthorNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Author", Storage="_Article", ThisKey="ArticleID", OtherKey="ID", IsForeignKey=true)]
	public Article Article
	{
		get
		{
			return this._Article.Entity;
		}
		set
		{
			Article previousValue = this._Article.Entity;
			if (((previousValue != value) 
						|| (this._Article.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Article.Entity = null;
					previousValue.Authors.Remove(this);
				}
				this._Article.Entity = value;
				if ((value != null))
				{
					value.Authors.Add(this);
					this._ArticleID = value.ID;
				}
				else
				{
					this._ArticleID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Article");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Classification")]
public partial class Classification : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _NameUy;
	
	private string _NameEn;
	
	private EntitySet<Article> _Articles;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameUyChanging(string value);
    partial void OnNameUyChanged();
    partial void OnNameEnChanging(string value);
    partial void OnNameEnChanged();
    #endregion
	
	public Classification()
	{
		this._Articles = new EntitySet<Article>(new Action<Article>(this.attach_Articles), new Action<Article>(this.detach_Articles));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameUy", DbType="NChar(255)")]
	public string NameUy
	{
		get
		{
			return this._NameUy;
		}
		set
		{
			if ((this._NameUy != value))
			{
				this.OnNameUyChanging(value);
				this.SendPropertyChanging();
				this._NameUy = value;
				this.SendPropertyChanged("NameUy");
				this.OnNameUyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameEn", DbType="NChar(255)")]
	public string NameEn
	{
		get
		{
			return this._NameEn;
		}
		set
		{
			if ((this._NameEn != value))
			{
				this.OnNameEnChanging(value);
				this.SendPropertyChanging();
				this._NameEn = value;
				this.SendPropertyChanged("NameEn");
				this.OnNameEnChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Classification_Article", Storage="_Articles", ThisKey="ID", OtherKey="Classification")]
	public EntitySet<Article> Articles
	{
		get
		{
			return this._Articles;
		}
		set
		{
			this._Articles.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Articles(Article entity)
	{
		this.SendPropertyChanging();
		entity.Classification1 = this;
	}
	
	private void detach_Articles(Article entity)
	{
		this.SendPropertyChanging();
		entity.Classification1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Eza")]
public partial class Eza : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _Password;
	
	private string _Email;
	
	private string _Tel;
	
	private System.Nullable<System.DateTime> _RegisteredTime;
	
	private System.Nullable<bool> _Admin;
	
	private System.Nullable<bool> _Enable;
	
	private EntitySet<Favorite> _Favorites;
	
	private EntitySet<Log> _Logs;
	
	private EntitySet<UserRole> _UserRoles;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnTelChanging(string value);
    partial void OnTelChanged();
    partial void OnRegisteredTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnRegisteredTimeChanged();
    partial void OnAdminChanging(System.Nullable<bool> value);
    partial void OnAdminChanged();
    partial void OnEnableChanging(System.Nullable<bool> value);
    partial void OnEnableChanged();
    #endregion
	
	public Eza()
	{
		this._Favorites = new EntitySet<Favorite>(new Action<Favorite>(this.attach_Favorites), new Action<Favorite>(this.detach_Favorites));
		this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
		this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(16)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NChar(32)")]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NChar(32)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="NChar(16)")]
	public string Tel
	{
		get
		{
			return this._Tel;
		}
		set
		{
			if ((this._Tel != value))
			{
				this.OnTelChanging(value);
				this.SendPropertyChanging();
				this._Tel = value;
				this.SendPropertyChanged("Tel");
				this.OnTelChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegisteredTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> RegisteredTime
	{
		get
		{
			return this._RegisteredTime;
		}
		set
		{
			if ((this._RegisteredTime != value))
			{
				this.OnRegisteredTimeChanging(value);
				this.SendPropertyChanging();
				this._RegisteredTime = value;
				this.SendPropertyChanged("RegisteredTime");
				this.OnRegisteredTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin", DbType="Bit")]
	public System.Nullable<bool> Admin
	{
		get
		{
			return this._Admin;
		}
		set
		{
			if ((this._Admin != value))
			{
				this.OnAdminChanging(value);
				this.SendPropertyChanging();
				this._Admin = value;
				this.SendPropertyChanged("Admin");
				this.OnAdminChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enable", DbType="Bit")]
	public System.Nullable<bool> Enable
	{
		get
		{
			return this._Enable;
		}
		set
		{
			if ((this._Enable != value))
			{
				this.OnEnableChanging(value);
				this.SendPropertyChanging();
				this._Enable = value;
				this.SendPropertyChanged("Enable");
				this.OnEnableChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Eza_Favorite", Storage="_Favorites", ThisKey="ID", OtherKey="UserID")]
	public EntitySet<Favorite> Favorites
	{
		get
		{
			return this._Favorites;
		}
		set
		{
			this._Favorites.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Eza_Log", Storage="_Logs", ThisKey="ID", OtherKey="UserID")]
	public EntitySet<Log> Logs
	{
		get
		{
			return this._Logs;
		}
		set
		{
			this._Logs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Eza_UserRole", Storage="_UserRoles", ThisKey="ID", OtherKey="UserID")]
	public EntitySet<UserRole> UserRoles
	{
		get
		{
			return this._UserRoles;
		}
		set
		{
			this._UserRoles.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Favorites(Favorite entity)
	{
		this.SendPropertyChanging();
		entity.Eza = this;
	}
	
	private void detach_Favorites(Favorite entity)
	{
		this.SendPropertyChanging();
		entity.Eza = null;
	}
	
	private void attach_Logs(Log entity)
	{
		this.SendPropertyChanging();
		entity.Eza = this;
	}
	
	private void detach_Logs(Log entity)
	{
		this.SendPropertyChanging();
		entity.Eza = null;
	}
	
	private void attach_UserRoles(UserRole entity)
	{
		this.SendPropertyChanging();
		entity.Eza = this;
	}
	
	private void detach_UserRoles(UserRole entity)
	{
		this.SendPropertyChanging();
		entity.Eza = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Favorite")]
public partial class Favorite : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ArticleID;
	
	private int _UserID;
	
	private System.Nullable<System.DateTime> _AddTime;
	
	private EntityRef<Eza> _Eza;
	
	private EntityRef<Article> _Article;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArticleIDChanging(int value);
    partial void OnArticleIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnAddTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnAddTimeChanged();
    #endregion
	
	public Favorite()
	{
		this._Eza = default(EntityRef<Eza>);
		this._Article = default(EntityRef<Article>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleID", DbType="Int NOT NULL")]
	public int ArticleID
	{
		get
		{
			return this._ArticleID;
		}
		set
		{
			if ((this._ArticleID != value))
			{
				if (this._Article.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnArticleIDChanging(value);
				this.SendPropertyChanging();
				this._ArticleID = value;
				this.SendPropertyChanged("ArticleID");
				this.OnArticleIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._Eza.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> AddTime
	{
		get
		{
			return this._AddTime;
		}
		set
		{
			if ((this._AddTime != value))
			{
				this.OnAddTimeChanging(value);
				this.SendPropertyChanging();
				this._AddTime = value;
				this.SendPropertyChanged("AddTime");
				this.OnAddTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Eza_Favorite", Storage="_Eza", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
	public Eza Eza
	{
		get
		{
			return this._Eza.Entity;
		}
		set
		{
			Eza previousValue = this._Eza.Entity;
			if (((previousValue != value) 
						|| (this._Eza.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Eza.Entity = null;
					previousValue.Favorites.Remove(this);
				}
				this._Eza.Entity = value;
				if ((value != null))
				{
					value.Favorites.Add(this);
					this._UserID = value.ID;
				}
				else
				{
					this._UserID = default(int);
				}
				this.SendPropertyChanged("Eza");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Favorite", Storage="_Article", ThisKey="ArticleID", OtherKey="ID", IsForeignKey=true)]
	public Article Article
	{
		get
		{
			return this._Article.Entity;
		}
		set
		{
			Article previousValue = this._Article.Entity;
			if (((previousValue != value) 
						|| (this._Article.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Article.Entity = null;
					previousValue.Favorites.Remove(this);
				}
				this._Article.Entity = value;
				if ((value != null))
				{
					value.Favorites.Add(this);
					this._ArticleID = value.ID;
				}
				else
				{
					this._ArticleID = default(int);
				}
				this.SendPropertyChanged("Article");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileType")]
public partial class FileType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _ID;
	
	private string _Extension;
	
	private string _MimeType;
	
	private string _Icon;
	
	private EntitySet<File> _Files;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(byte value);
    partial void OnIDChanged();
    partial void OnExtensionChanging(string value);
    partial void OnExtensionChanged();
    partial void OnMimeTypeChanging(string value);
    partial void OnMimeTypeChanged();
    partial void OnIconChanging(string value);
    partial void OnIconChanged();
    #endregion
	
	public FileType()
	{
		this._Files = new EntitySet<File>(new Action<File>(this.attach_Files), new Action<File>(this.detach_Files));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Extension", DbType="NChar(8)")]
	public string Extension
	{
		get
		{
			return this._Extension;
		}
		set
		{
			if ((this._Extension != value))
			{
				this.OnExtensionChanging(value);
				this.SendPropertyChanging();
				this._Extension = value;
				this.SendPropertyChanged("Extension");
				this.OnExtensionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MimeType", DbType="NChar(255)")]
	public string MimeType
	{
		get
		{
			return this._MimeType;
		}
		set
		{
			if ((this._MimeType != value))
			{
				this.OnMimeTypeChanging(value);
				this.SendPropertyChanging();
				this._MimeType = value;
				this.SendPropertyChanged("MimeType");
				this.OnMimeTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Icon", DbType="NChar(255)")]
	public string Icon
	{
		get
		{
			return this._Icon;
		}
		set
		{
			if ((this._Icon != value))
			{
				this.OnIconChanging(value);
				this.SendPropertyChanging();
				this._Icon = value;
				this.SendPropertyChanged("Icon");
				this.OnIconChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileType_File", Storage="_Files", ThisKey="ID", OtherKey="FileType")]
	public EntitySet<File> Files
	{
		get
		{
			return this._Files;
		}
		set
		{
			this._Files.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Files(File entity)
	{
		this.SendPropertyChanging();
		entity.FileType1 = this;
	}
	
	private void detach_Files(File entity)
	{
		this.SendPropertyChanging();
		entity.FileType1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KeyWord")]
public partial class KeyWord : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ArticleID;
	
	private string _KeyWord1;
	
	private System.Nullable<int> _Language;
	
	private EntityRef<Article> _Article;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArticleIDChanging(int value);
    partial void OnArticleIDChanged();
    partial void OnKeyWord1Changing(string value);
    partial void OnKeyWord1Changed();
    partial void OnLanguageChanging(System.Nullable<int> value);
    partial void OnLanguageChanged();
    #endregion
	
	public KeyWord()
	{
		this._Article = default(EntityRef<Article>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleID", DbType="Int NOT NULL")]
	public int ArticleID
	{
		get
		{
			return this._ArticleID;
		}
		set
		{
			if ((this._ArticleID != value))
			{
				if (this._Article.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnArticleIDChanging(value);
				this.SendPropertyChanging();
				this._ArticleID = value;
				this.SendPropertyChanged("ArticleID");
				this.OnArticleIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="KeyWord", Storage="_KeyWord1", DbType="NChar(32)")]
	public string KeyWord1
	{
		get
		{
			return this._KeyWord1;
		}
		set
		{
			if ((this._KeyWord1 != value))
			{
				this.OnKeyWord1Changing(value);
				this.SendPropertyChanging();
				this._KeyWord1 = value;
				this.SendPropertyChanged("KeyWord1");
				this.OnKeyWord1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="Int")]
	public System.Nullable<int> Language
	{
		get
		{
			return this._Language;
		}
		set
		{
			if ((this._Language != value))
			{
				this.OnLanguageChanging(value);
				this.SendPropertyChanging();
				this._Language = value;
				this.SendPropertyChanged("Language");
				this.OnLanguageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_KeyWord", Storage="_Article", ThisKey="ArticleID", OtherKey="ID", IsForeignKey=true)]
	public Article Article
	{
		get
		{
			return this._Article.Entity;
		}
		set
		{
			Article previousValue = this._Article.Entity;
			if (((previousValue != value) 
						|| (this._Article.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Article.Entity = null;
					previousValue.KeyWords.Remove(this);
				}
				this._Article.Entity = value;
				if ((value != null))
				{
					value.KeyWords.Add(this);
					this._ArticleID = value.ID;
				}
				else
				{
					this._ArticleID = default(int);
				}
				this.SendPropertyChanged("Article");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Language")]
public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _NameEn;
	
	private string _NameUy;
	
	private string _NameNative;
	
	private string _IsoCode;
	
	private EntitySet<Title> _Titles;
	
	private EntitySet<Article> _Articles;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameEnChanging(string value);
    partial void OnNameEnChanged();
    partial void OnNameUyChanging(string value);
    partial void OnNameUyChanged();
    partial void OnNameNativeChanging(string value);
    partial void OnNameNativeChanged();
    partial void OnIsoCodeChanging(string value);
    partial void OnIsoCodeChanged();
    #endregion
	
	public Language()
	{
		this._Titles = new EntitySet<Title>(new Action<Title>(this.attach_Titles), new Action<Title>(this.detach_Titles));
		this._Articles = new EntitySet<Article>(new Action<Article>(this.attach_Articles), new Action<Article>(this.detach_Articles));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameEn", DbType="NChar(32)")]
	public string NameEn
	{
		get
		{
			return this._NameEn;
		}
		set
		{
			if ((this._NameEn != value))
			{
				this.OnNameEnChanging(value);
				this.SendPropertyChanging();
				this._NameEn = value;
				this.SendPropertyChanged("NameEn");
				this.OnNameEnChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameUy", DbType="NChar(32)")]
	public string NameUy
	{
		get
		{
			return this._NameUy;
		}
		set
		{
			if ((this._NameUy != value))
			{
				this.OnNameUyChanging(value);
				this.SendPropertyChanging();
				this._NameUy = value;
				this.SendPropertyChanged("NameUy");
				this.OnNameUyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameNative", DbType="NChar(32)")]
	public string NameNative
	{
		get
		{
			return this._NameNative;
		}
		set
		{
			if ((this._NameNative != value))
			{
				this.OnNameNativeChanging(value);
				this.SendPropertyChanging();
				this._NameNative = value;
				this.SendPropertyChanged("NameNative");
				this.OnNameNativeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsoCode", DbType="NChar(2) NOT NULL", CanBeNull=false)]
	public string IsoCode
	{
		get
		{
			return this._IsoCode;
		}
		set
		{
			if ((this._IsoCode != value))
			{
				this.OnIsoCodeChanging(value);
				this.SendPropertyChanging();
				this._IsoCode = value;
				this.SendPropertyChanged("IsoCode");
				this.OnIsoCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Title", Storage="_Titles", ThisKey="ID", OtherKey="Language")]
	public EntitySet<Title> Titles
	{
		get
		{
			return this._Titles;
		}
		set
		{
			this._Titles.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Article", Storage="_Articles", ThisKey="ID", OtherKey="Language")]
	public EntitySet<Article> Articles
	{
		get
		{
			return this._Articles;
		}
		set
		{
			this._Articles.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Titles(Title entity)
	{
		this.SendPropertyChanging();
		entity.Language1 = this;
	}
	
	private void detach_Titles(Title entity)
	{
		this.SendPropertyChanging();
		entity.Language1 = null;
	}
	
	private void attach_Articles(Article entity)
	{
		this.SendPropertyChanging();
		entity.Language1 = this;
	}
	
	private void detach_Articles(Article entity)
	{
		this.SendPropertyChanging();
		entity.Language1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Log]")]
public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<int> _UserID;
	
	private string _Message;
	
	private System.Nullable<System.DateTime> _AddDate;
	
	private EntityRef<Eza> _Eza;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    #endregion
	
	public Log()
	{
		this._Eza = default(EntityRef<Eza>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
	public System.Nullable<int> UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._Eza.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(1024)")]
	public string Message
	{
		get
		{
			return this._Message;
		}
		set
		{
			if ((this._Message != value))
			{
				this.OnMessageChanging(value);
				this.SendPropertyChanging();
				this._Message = value;
				this.SendPropertyChanged("Message");
				this.OnMessageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> AddDate
	{
		get
		{
			return this._AddDate;
		}
		set
		{
			if ((this._AddDate != value))
			{
				this.OnAddDateChanging(value);
				this.SendPropertyChanging();
				this._AddDate = value;
				this.SendPropertyChanged("AddDate");
				this.OnAddDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Eza_Log", Storage="_Eza", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
	public Eza Eza
	{
		get
		{
			return this._Eza.Entity;
		}
		set
		{
			Eza previousValue = this._Eza.Entity;
			if (((previousValue != value) 
						|| (this._Eza.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Eza.Entity = null;
					previousValue.Logs.Remove(this);
				}
				this._Eza.Entity = value;
				if ((value != null))
				{
					value.Logs.Add(this);
					this._UserID = value.ID;
				}
				else
				{
					this._UserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Eza");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Replay")]
public partial class Replay : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<int> _ArticleID;
	
	private string _Title;
	
	private string _ReplayContent;
	
	private System.Nullable<System.DateTime> _ReplayDate;
	
	private System.Nullable<int> _UserID;
	
	private System.Nullable<bool> _Enable;
	
	private System.Nullable<bool> _Deleted;
	
	private EntityRef<Article> _Article;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArticleIDChanging(System.Nullable<int> value);
    partial void OnArticleIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnReplayContentChanging(string value);
    partial void OnReplayContentChanged();
    partial void OnReplayDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReplayDateChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnEnableChanging(System.Nullable<bool> value);
    partial void OnEnableChanged();
    partial void OnDeletedChanging(System.Nullable<bool> value);
    partial void OnDeletedChanged();
    #endregion
	
	public Replay()
	{
		this._Article = default(EntityRef<Article>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleID", DbType="Int")]
	public System.Nullable<int> ArticleID
	{
		get
		{
			return this._ArticleID;
		}
		set
		{
			if ((this._ArticleID != value))
			{
				if (this._Article.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnArticleIDChanging(value);
				this.SendPropertyChanging();
				this._ArticleID = value;
				this.SendPropertyChanged("ArticleID");
				this.OnArticleIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(512)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReplayContent", DbType="NVarChar(MAX)")]
	public string ReplayContent
	{
		get
		{
			return this._ReplayContent;
		}
		set
		{
			if ((this._ReplayContent != value))
			{
				this.OnReplayContentChanging(value);
				this.SendPropertyChanging();
				this._ReplayContent = value;
				this.SendPropertyChanged("ReplayContent");
				this.OnReplayContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReplayDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> ReplayDate
	{
		get
		{
			return this._ReplayDate;
		}
		set
		{
			if ((this._ReplayDate != value))
			{
				this.OnReplayDateChanging(value);
				this.SendPropertyChanging();
				this._ReplayDate = value;
				this.SendPropertyChanged("ReplayDate");
				this.OnReplayDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
	public System.Nullable<int> UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enable", DbType="Bit")]
	public System.Nullable<bool> Enable
	{
		get
		{
			return this._Enable;
		}
		set
		{
			if ((this._Enable != value))
			{
				this.OnEnableChanging(value);
				this.SendPropertyChanging();
				this._Enable = value;
				this.SendPropertyChanged("Enable");
				this.OnEnableChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit")]
	public System.Nullable<bool> Deleted
	{
		get
		{
			return this._Deleted;
		}
		set
		{
			if ((this._Deleted != value))
			{
				this.OnDeletedChanging(value);
				this.SendPropertyChanging();
				this._Deleted = value;
				this.SendPropertyChanged("Deleted");
				this.OnDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Replay", Storage="_Article", ThisKey="ArticleID", OtherKey="ID", IsForeignKey=true)]
	public Article Article
	{
		get
		{
			return this._Article.Entity;
		}
		set
		{
			Article previousValue = this._Article.Entity;
			if (((previousValue != value) 
						|| (this._Article.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Article.Entity = null;
					previousValue.Replays.Remove(this);
				}
				this._Article.Entity = value;
				if ((value != null))
				{
					value.Replays.Add(this);
					this._ArticleID = value.ID;
				}
				else
				{
					this._ArticleID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Article");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Title")]
public partial class Title : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ArticleID;
	
	private string _Title1;
	
	private System.Nullable<int> _Language;
	
	private EntityRef<Language> _Language1;
	
	private EntityRef<Article> _Article;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArticleIDChanging(int value);
    partial void OnArticleIDChanged();
    partial void OnTitle1Changing(string value);
    partial void OnTitle1Changed();
    partial void OnLanguageChanging(System.Nullable<int> value);
    partial void OnLanguageChanged();
    #endregion
	
	public Title()
	{
		this._Language1 = default(EntityRef<Language>);
		this._Article = default(EntityRef<Article>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleID", DbType="Int NOT NULL")]
	public int ArticleID
	{
		get
		{
			return this._ArticleID;
		}
		set
		{
			if ((this._ArticleID != value))
			{
				if (this._Article.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnArticleIDChanging(value);
				this.SendPropertyChanging();
				this._ArticleID = value;
				this.SendPropertyChanged("ArticleID");
				this.OnArticleIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Title", Storage="_Title1", DbType="NChar(512)")]
	public string Title1
	{
		get
		{
			return this._Title1;
		}
		set
		{
			if ((this._Title1 != value))
			{
				this.OnTitle1Changing(value);
				this.SendPropertyChanging();
				this._Title1 = value;
				this.SendPropertyChanged("Title1");
				this.OnTitle1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="Int")]
	public System.Nullable<int> Language
	{
		get
		{
			return this._Language;
		}
		set
		{
			if ((this._Language != value))
			{
				if (this._Language1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLanguageChanging(value);
				this.SendPropertyChanging();
				this._Language = value;
				this.SendPropertyChanged("Language");
				this.OnLanguageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Title", Storage="_Language1", ThisKey="Language", OtherKey="ID", IsForeignKey=true)]
	public Language Language1
	{
		get
		{
			return this._Language1.Entity;
		}
		set
		{
			Language previousValue = this._Language1.Entity;
			if (((previousValue != value) 
						|| (this._Language1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Language1.Entity = null;
					previousValue.Titles.Remove(this);
				}
				this._Language1.Entity = value;
				if ((value != null))
				{
					value.Titles.Add(this);
					this._Language = value.ID;
				}
				else
				{
					this._Language = default(Nullable<int>);
				}
				this.SendPropertyChanged("Language1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Title", Storage="_Article", ThisKey="ArticleID", OtherKey="ID", IsForeignKey=true)]
	public Article Article
	{
		get
		{
			return this._Article.Entity;
		}
		set
		{
			Article previousValue = this._Article.Entity;
			if (((previousValue != value) 
						|| (this._Article.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Article.Entity = null;
					previousValue.Titles.Remove(this);
				}
				this._Article.Entity = value;
				if ((value != null))
				{
					value.Titles.Add(this);
					this._ArticleID = value.ID;
				}
				else
				{
					this._ArticleID = default(int);
				}
				this.SendPropertyChanged("Article");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRole")]
public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<int> _PageID;
	
	private System.Nullable<int> _UserID;
	
	private System.Nullable<bool> _Enable;
	
	private EntityRef<Eza> _Eza;
	
	private EntityRef<WebPage> _WebPage;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPageIDChanging(System.Nullable<int> value);
    partial void OnPageIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnEnableChanging(System.Nullable<bool> value);
    partial void OnEnableChanged();
    #endregion
	
	public UserRole()
	{
		this._Eza = default(EntityRef<Eza>);
		this._WebPage = default(EntityRef<WebPage>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageID", DbType="Int")]
	public System.Nullable<int> PageID
	{
		get
		{
			return this._PageID;
		}
		set
		{
			if ((this._PageID != value))
			{
				if (this._WebPage.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPageIDChanging(value);
				this.SendPropertyChanging();
				this._PageID = value;
				this.SendPropertyChanged("PageID");
				this.OnPageIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
	public System.Nullable<int> UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._Eza.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enable", DbType="Bit")]
	public System.Nullable<bool> Enable
	{
		get
		{
			return this._Enable;
		}
		set
		{
			if ((this._Enable != value))
			{
				this.OnEnableChanging(value);
				this.SendPropertyChanging();
				this._Enable = value;
				this.SendPropertyChanged("Enable");
				this.OnEnableChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Eza_UserRole", Storage="_Eza", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
	public Eza Eza
	{
		get
		{
			return this._Eza.Entity;
		}
		set
		{
			Eza previousValue = this._Eza.Entity;
			if (((previousValue != value) 
						|| (this._Eza.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Eza.Entity = null;
					previousValue.UserRoles.Remove(this);
				}
				this._Eza.Entity = value;
				if ((value != null))
				{
					value.UserRoles.Add(this);
					this._UserID = value.ID;
				}
				else
				{
					this._UserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Eza");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebPage_UserRole", Storage="_WebPage", ThisKey="PageID", OtherKey="ID", IsForeignKey=true)]
	public WebPage WebPage
	{
		get
		{
			return this._WebPage.Entity;
		}
		set
		{
			WebPage previousValue = this._WebPage.Entity;
			if (((previousValue != value) 
						|| (this._WebPage.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._WebPage.Entity = null;
					previousValue.UserRoles.Remove(this);
				}
				this._WebPage.Entity = value;
				if ((value != null))
				{
					value.UserRoles.Add(this);
					this._PageID = value.ID;
				}
				else
				{
					this._PageID = default(Nullable<int>);
				}
				this.SendPropertyChanged("WebPage");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Article")]
public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Source;
	
	private System.Nullable<int> _Language;
	
	private string _ArticleContent;
	
	private System.Nullable<int> _Classification;
	
	private int _DownCount;
	
	private int _VisitCount;
	
	private int _ReadCount;
	
	private bool _Enable;
	
	private bool _Deleted;
	
	private bool _Recommend;
	
	private System.DateTime _AddTime;
	
	private EntitySet<Abstraction> _Abstractions;
	
	private EntitySet<Author> _Authors;
	
	private EntitySet<Favorite> _Favorites;
	
	private EntitySet<KeyWord> _KeyWords;
	
	private EntitySet<Replay> _Replays;
	
	private EntitySet<Title> _Titles;
	
	private EntitySet<File> _Files;
	
	private EntityRef<Classification> _Classification1;
	
	private EntityRef<Language> _Language1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnLanguageChanging(System.Nullable<int> value);
    partial void OnLanguageChanged();
    partial void OnArticleContentChanging(string value);
    partial void OnArticleContentChanged();
    partial void OnClassificationChanging(System.Nullable<int> value);
    partial void OnClassificationChanged();
    partial void OnDownCountChanging(int value);
    partial void OnDownCountChanged();
    partial void OnVisitCountChanging(int value);
    partial void OnVisitCountChanged();
    partial void OnReadCountChanging(int value);
    partial void OnReadCountChanged();
    partial void OnEnableChanging(bool value);
    partial void OnEnableChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnRecommendChanging(bool value);
    partial void OnRecommendChanged();
    partial void OnAddTimeChanging(System.DateTime value);
    partial void OnAddTimeChanged();
    #endregion
	
	public Article()
	{
		this._Abstractions = new EntitySet<Abstraction>(new Action<Abstraction>(this.attach_Abstractions), new Action<Abstraction>(this.detach_Abstractions));
		this._Authors = new EntitySet<Author>(new Action<Author>(this.attach_Authors), new Action<Author>(this.detach_Authors));
		this._Favorites = new EntitySet<Favorite>(new Action<Favorite>(this.attach_Favorites), new Action<Favorite>(this.detach_Favorites));
		this._KeyWords = new EntitySet<KeyWord>(new Action<KeyWord>(this.attach_KeyWords), new Action<KeyWord>(this.detach_KeyWords));
		this._Replays = new EntitySet<Replay>(new Action<Replay>(this.attach_Replays), new Action<Replay>(this.detach_Replays));
		this._Titles = new EntitySet<Title>(new Action<Title>(this.attach_Titles), new Action<Title>(this.detach_Titles));
		this._Files = new EntitySet<File>(new Action<File>(this.attach_Files), new Action<File>(this.detach_Files));
		this._Classification1 = default(EntityRef<Classification>);
		this._Language1 = default(EntityRef<Language>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="NVarChar(512)")]
	public string Source
	{
		get
		{
			return this._Source;
		}
		set
		{
			if ((this._Source != value))
			{
				this.OnSourceChanging(value);
				this.SendPropertyChanging();
				this._Source = value;
				this.SendPropertyChanged("Source");
				this.OnSourceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="Int")]
	public System.Nullable<int> Language
	{
		get
		{
			return this._Language;
		}
		set
		{
			if ((this._Language != value))
			{
				if (this._Language1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLanguageChanging(value);
				this.SendPropertyChanging();
				this._Language = value;
				this.SendPropertyChanged("Language");
				this.OnLanguageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleContent", DbType="NVarChar(MAX)")]
	public string ArticleContent
	{
		get
		{
			return this._ArticleContent;
		}
		set
		{
			if ((this._ArticleContent != value))
			{
				this.OnArticleContentChanging(value);
				this.SendPropertyChanging();
				this._ArticleContent = value;
				this.SendPropertyChanged("ArticleContent");
				this.OnArticleContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Classification", DbType="Int")]
	public System.Nullable<int> Classification
	{
		get
		{
			return this._Classification;
		}
		set
		{
			if ((this._Classification != value))
			{
				if (this._Classification1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClassificationChanging(value);
				this.SendPropertyChanging();
				this._Classification = value;
				this.SendPropertyChanged("Classification");
				this.OnClassificationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DownCount", DbType="Int NOT NULL")]
	public int DownCount
	{
		get
		{
			return this._DownCount;
		}
		set
		{
			if ((this._DownCount != value))
			{
				this.OnDownCountChanging(value);
				this.SendPropertyChanging();
				this._DownCount = value;
				this.SendPropertyChanged("DownCount");
				this.OnDownCountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitCount", DbType="Int NOT NULL")]
	public int VisitCount
	{
		get
		{
			return this._VisitCount;
		}
		set
		{
			if ((this._VisitCount != value))
			{
				this.OnVisitCountChanging(value);
				this.SendPropertyChanging();
				this._VisitCount = value;
				this.SendPropertyChanged("VisitCount");
				this.OnVisitCountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadCount", DbType="Int NOT NULL")]
	public int ReadCount
	{
		get
		{
			return this._ReadCount;
		}
		set
		{
			if ((this._ReadCount != value))
			{
				this.OnReadCountChanging(value);
				this.SendPropertyChanging();
				this._ReadCount = value;
				this.SendPropertyChanged("ReadCount");
				this.OnReadCountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enable", DbType="Bit NOT NULL")]
	public bool Enable
	{
		get
		{
			return this._Enable;
		}
		set
		{
			if ((this._Enable != value))
			{
				this.OnEnableChanging(value);
				this.SendPropertyChanging();
				this._Enable = value;
				this.SendPropertyChanged("Enable");
				this.OnEnableChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
	public bool Deleted
	{
		get
		{
			return this._Deleted;
		}
		set
		{
			if ((this._Deleted != value))
			{
				this.OnDeletedChanging(value);
				this.SendPropertyChanging();
				this._Deleted = value;
				this.SendPropertyChanged("Deleted");
				this.OnDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recommend", DbType="Bit NOT NULL")]
	public bool Recommend
	{
		get
		{
			return this._Recommend;
		}
		set
		{
			if ((this._Recommend != value))
			{
				this.OnRecommendChanging(value);
				this.SendPropertyChanging();
				this._Recommend = value;
				this.SendPropertyChanged("Recommend");
				this.OnRecommendChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddTime", DbType="DateTime NOT NULL")]
	public System.DateTime AddTime
	{
		get
		{
			return this._AddTime;
		}
		set
		{
			if ((this._AddTime != value))
			{
				this.OnAddTimeChanging(value);
				this.SendPropertyChanging();
				this._AddTime = value;
				this.SendPropertyChanged("AddTime");
				this.OnAddTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Abstraction", Storage="_Abstractions", ThisKey="ID", OtherKey="ArticleID")]
	public EntitySet<Abstraction> Abstractions
	{
		get
		{
			return this._Abstractions;
		}
		set
		{
			this._Abstractions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Author", Storage="_Authors", ThisKey="ID", OtherKey="ArticleID")]
	public EntitySet<Author> Authors
	{
		get
		{
			return this._Authors;
		}
		set
		{
			this._Authors.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Favorite", Storage="_Favorites", ThisKey="ID", OtherKey="ArticleID")]
	public EntitySet<Favorite> Favorites
	{
		get
		{
			return this._Favorites;
		}
		set
		{
			this._Favorites.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_KeyWord", Storage="_KeyWords", ThisKey="ID", OtherKey="ArticleID")]
	public EntitySet<KeyWord> KeyWords
	{
		get
		{
			return this._KeyWords;
		}
		set
		{
			this._KeyWords.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Replay", Storage="_Replays", ThisKey="ID", OtherKey="ArticleID")]
	public EntitySet<Replay> Replays
	{
		get
		{
			return this._Replays;
		}
		set
		{
			this._Replays.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Title", Storage="_Titles", ThisKey="ID", OtherKey="ArticleID")]
	public EntitySet<Title> Titles
	{
		get
		{
			return this._Titles;
		}
		set
		{
			this._Titles.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_File", Storage="_Files", ThisKey="ID", OtherKey="ArticleID")]
	public EntitySet<File> Files
	{
		get
		{
			return this._Files;
		}
		set
		{
			this._Files.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Classification_Article", Storage="_Classification1", ThisKey="Classification", OtherKey="ID", IsForeignKey=true)]
	public Classification Classification1
	{
		get
		{
			return this._Classification1.Entity;
		}
		set
		{
			Classification previousValue = this._Classification1.Entity;
			if (((previousValue != value) 
						|| (this._Classification1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Classification1.Entity = null;
					previousValue.Articles.Remove(this);
				}
				this._Classification1.Entity = value;
				if ((value != null))
				{
					value.Articles.Add(this);
					this._Classification = value.ID;
				}
				else
				{
					this._Classification = default(Nullable<int>);
				}
				this.SendPropertyChanged("Classification1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Article", Storage="_Language1", ThisKey="Language", OtherKey="ID", IsForeignKey=true)]
	public Language Language1
	{
		get
		{
			return this._Language1.Entity;
		}
		set
		{
			Language previousValue = this._Language1.Entity;
			if (((previousValue != value) 
						|| (this._Language1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Language1.Entity = null;
					previousValue.Articles.Remove(this);
				}
				this._Language1.Entity = value;
				if ((value != null))
				{
					value.Articles.Add(this);
					this._Language = value.ID;
				}
				else
				{
					this._Language = default(Nullable<int>);
				}
				this.SendPropertyChanged("Language1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Abstractions(Abstraction entity)
	{
		this.SendPropertyChanging();
		entity.Article = this;
	}
	
	private void detach_Abstractions(Abstraction entity)
	{
		this.SendPropertyChanging();
		entity.Article = null;
	}
	
	private void attach_Authors(Author entity)
	{
		this.SendPropertyChanging();
		entity.Article = this;
	}
	
	private void detach_Authors(Author entity)
	{
		this.SendPropertyChanging();
		entity.Article = null;
	}
	
	private void attach_Favorites(Favorite entity)
	{
		this.SendPropertyChanging();
		entity.Article = this;
	}
	
	private void detach_Favorites(Favorite entity)
	{
		this.SendPropertyChanging();
		entity.Article = null;
	}
	
	private void attach_KeyWords(KeyWord entity)
	{
		this.SendPropertyChanging();
		entity.Article = this;
	}
	
	private void detach_KeyWords(KeyWord entity)
	{
		this.SendPropertyChanging();
		entity.Article = null;
	}
	
	private void attach_Replays(Replay entity)
	{
		this.SendPropertyChanging();
		entity.Article = this;
	}
	
	private void detach_Replays(Replay entity)
	{
		this.SendPropertyChanging();
		entity.Article = null;
	}
	
	private void attach_Titles(Title entity)
	{
		this.SendPropertyChanging();
		entity.Article = this;
	}
	
	private void detach_Titles(Title entity)
	{
		this.SendPropertyChanging();
		entity.Article = null;
	}
	
	private void attach_Files(File entity)
	{
		this.SendPropertyChanging();
		entity.Article = this;
	}
	
	private void detach_Files(File entity)
	{
		this.SendPropertyChanging();
		entity.Article = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[File]")]
public partial class File : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ArticleID;
	
	private System.Nullable<byte> _FileType;
	
	private string _FileName;
	
	private string _FilePath;
	
	private string _FileTitle;
	
	private System.Nullable<System.DateTime> _AddTime;
	
	private bool _Enable;
	
	private EntityRef<Article> _Article;
	
	private EntityRef<FileType> _FileType1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArticleIDChanging(int value);
    partial void OnArticleIDChanged();
    partial void OnFileTypeChanging(System.Nullable<byte> value);
    partial void OnFileTypeChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnFileTitleChanging(string value);
    partial void OnFileTitleChanged();
    partial void OnAddTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnAddTimeChanged();
    partial void OnEnableChanging(bool value);
    partial void OnEnableChanged();
    #endregion
	
	public File()
	{
		this._Article = default(EntityRef<Article>);
		this._FileType1 = default(EntityRef<FileType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleID", DbType="Int NOT NULL")]
	public int ArticleID
	{
		get
		{
			return this._ArticleID;
		}
		set
		{
			if ((this._ArticleID != value))
			{
				if (this._Article.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnArticleIDChanging(value);
				this.SendPropertyChanging();
				this._ArticleID = value;
				this.SendPropertyChanged("ArticleID");
				this.OnArticleIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileType", DbType="TinyInt")]
	public System.Nullable<byte> FileType
	{
		get
		{
			return this._FileType;
		}
		set
		{
			if ((this._FileType != value))
			{
				if (this._FileType1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFileTypeChanging(value);
				this.SendPropertyChanging();
				this._FileType = value;
				this.SendPropertyChanged("FileType");
				this.OnFileTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NChar(255)")]
	public string FileName
	{
		get
		{
			return this._FileName;
		}
		set
		{
			if ((this._FileName != value))
			{
				this.OnFileNameChanging(value);
				this.SendPropertyChanging();
				this._FileName = value;
				this.SendPropertyChanged("FileName");
				this.OnFileNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="NChar(512)")]
	public string FilePath
	{
		get
		{
			return this._FilePath;
		}
		set
		{
			if ((this._FilePath != value))
			{
				this.OnFilePathChanging(value);
				this.SendPropertyChanging();
				this._FilePath = value;
				this.SendPropertyChanged("FilePath");
				this.OnFilePathChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileTitle", DbType="NChar(255)")]
	public string FileTitle
	{
		get
		{
			return this._FileTitle;
		}
		set
		{
			if ((this._FileTitle != value))
			{
				this.OnFileTitleChanging(value);
				this.SendPropertyChanging();
				this._FileTitle = value;
				this.SendPropertyChanged("FileTitle");
				this.OnFileTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> AddTime
	{
		get
		{
			return this._AddTime;
		}
		set
		{
			if ((this._AddTime != value))
			{
				this.OnAddTimeChanging(value);
				this.SendPropertyChanging();
				this._AddTime = value;
				this.SendPropertyChanged("AddTime");
				this.OnAddTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enable", DbType="Bit NOT NULL")]
	public bool Enable
	{
		get
		{
			return this._Enable;
		}
		set
		{
			if ((this._Enable != value))
			{
				this.OnEnableChanging(value);
				this.SendPropertyChanging();
				this._Enable = value;
				this.SendPropertyChanged("Enable");
				this.OnEnableChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_File", Storage="_Article", ThisKey="ArticleID", OtherKey="ID", IsForeignKey=true)]
	public Article Article
	{
		get
		{
			return this._Article.Entity;
		}
		set
		{
			Article previousValue = this._Article.Entity;
			if (((previousValue != value) 
						|| (this._Article.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Article.Entity = null;
					previousValue.Files.Remove(this);
				}
				this._Article.Entity = value;
				if ((value != null))
				{
					value.Files.Add(this);
					this._ArticleID = value.ID;
				}
				else
				{
					this._ArticleID = default(int);
				}
				this.SendPropertyChanged("Article");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileType_File", Storage="_FileType1", ThisKey="FileType", OtherKey="ID", IsForeignKey=true)]
	public FileType FileType1
	{
		get
		{
			return this._FileType1.Entity;
		}
		set
		{
			FileType previousValue = this._FileType1.Entity;
			if (((previousValue != value) 
						|| (this._FileType1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._FileType1.Entity = null;
					previousValue.Files.Remove(this);
				}
				this._FileType1.Entity = value;
				if ((value != null))
				{
					value.Files.Add(this);
					this._FileType = value.ID;
				}
				else
				{
					this._FileType = default(Nullable<byte>);
				}
				this.SendPropertyChanged("FileType1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
